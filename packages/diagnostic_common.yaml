# Define buttons for various actions
button:
  - platform: restart
    name: Restart
    icon: mdi:restart-alert
    entity_category: "config"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset"
    id: factory_reset_all
    icon: mdi:restore-alert
    entity_category: "config"

# Define a switch for factory reset, used internally
switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true

# Enable debug logging with an update interval of 30 seconds
debug:
  update_interval: 30s

# Define a time platform to sync with Home Assistant
time:
  - platform: homeassistant
    id: global_time

# GitHub repository monitoring component
api:
  services:
    - service: check_for_updates
      then:
        - lambda: |-
            id(github_last_check).publish_state(id(global_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str());
        - http_request.get:
            url: https://api.github.com/repos/hellosamblack/esphome-configurations/commits
            headers:
              Accept: application/vnd.github.v3+json
              User-Agent: ESPHome
            on_response:
              then:
                - lambda: |-
                    process_github_response(id(http_response_code).state, 
                                           id(http_response_data).state, 
                                           id(github_latest_commit), 
                                           id(github_stored_commit), 
                                           id(update_available), 
                                           id(github_update_available));

# Include GitHub monitoring helper functions
includes:
  - github_helpers.h

# HTTP component for GitHub API requests
http_request:
  useragent: ESPHome
  timeout: 10s

# Define sensors for various diagnostic metrics
sensor:
  # Internal temperature of the ESP
  - platform: internal_temperature
    name: "HW: Temperature"
    id: sys_esp_temperature
    icon: mdi:thermometer
    entity_category: "diagnostic"

  # WiFi signal strength in dB
  - platform: wifi_signal
    name: "WiFi: Signal dB"
    id: wifi_signal_db
    unit_of_measurement: "dB"
    update_interval: 60s
    entity_category: "diagnostic"
    internal: false
    icon: mdi:wifi-strength-3

  # WiFi signal strength as a percentage
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi: Signal Strength"
    id: wifi_signal_strength
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: signal_strength
    icon: mdi:wifi-strength-4

  # Uptime of the device
  - platform: uptime
    name: "Uptime"
    entity_category: "diagnostic"
    icon: mdi:clock-outline

  # Debug information about heap memory and loop time
  - platform: debug
    free:
      name: "HW: Heap Free"
      icon: mdi:memory
      entity_category: "diagnostic"
    block:
      name: "HW: Heap Max Block"
      icon: mdi:memory
      entity_category: "diagnostic"
    loop_time:
      name: "HW: Loop Time"
      icon: mdi:timer-outline
      entity_category: "diagnostic"

  # HTTP response code sensor for GitHub API requests
  - platform: template
    name: "GitHub API Response Code"
    id: http_response_code
    icon: mdi:api
    entity_category: "diagnostic"
    internal: true

# Define binary sensors
binary_sensor:
  # Update available status
  - platform: template
    name: "GitHub Update Available"
    id: update_available
    icon: mdi:update
    entity_category: "diagnostic"

# Define text sensors for various diagnostic information
text_sensor:
  # GitHub monitoring sensors
  - platform: template
    name: "GitHub Last Check"
    id: github_last_check
    icon: mdi:clock-check
    entity_category: "diagnostic"
  
  - platform: template
    name: "GitHub Latest Commit"
    id: github_latest_commit
    icon: mdi:source-commit
    entity_category: "diagnostic"
  
  - platform: template
    name: "GitHub Stored Commit"
    id: github_stored_commit
    icon: mdi:source-commit-local
    entity_category: "diagnostic"
    internal: true
  
  - platform: template
    name: "GitHub Update Available"
    id: github_update_available
    icon: mdi:update
    entity_category: "diagnostic"
  
  # HTTP response data for GitHub API
  - platform: template
    name: "HTTP Response Data"
    id: http_response_data
    internal: true

  # Version information
  - platform: git_ref
    internal: false
    id: git_ref_id
    name: "Version: Git Ref"
    long: true
    all: true
    abbrev: 16
    dirty: "-dirty"
    icon: mdi:git

  - platform: version
    internal: false
    id: esphome_version_id
    name: "Version: ESPHome"
    hide_timestamp: true
    icon: mdi:tag-text

  # ESPHome Build Time
  - platform: template
    name: "Version: Build Time"
    id: esphome_build_time
    icon: "mdi:calendar-clock"
    entity_category: "diagnostic"
    update_interval: 600s
    lambda: |-
      return {
        App.get_compilation_time()
      };

  # WiFi information including IP address, SSID, BSSID, MAC address, scan results, and DNS address
  - platform: wifi_info
    ip_address:
      name: "Network: IP Address"
      icon: mdi:ip-network
      address_0:
        name: "Network: IP Address"
        icon: mdi:ip-network
    ssid:
      name: "WiFi: SSID"
      icon: mdi:wifi
    bssid:
      name: "WiFi: BSSID"
      icon: mdi:router-wireless
    scan_results:
      name: "WiFi: SSIDs"
      icon: mdi:wifi-search
    dns_address:
      name: "Network: DNS Address"
      icon: mdi:dns

  # Debug information about the device and reset reason
  - platform: debug
    device:
      name: "ESP32 Info"
      internal: true
      on_value:
        - lambda: |-
            process_device_info(x.c_str(), 
                              id(esp32_esphome_version), 
                              id(esp32_chip_model), 
                              id(esp32_chip_features), 
                              id(esp32_chip_cores), 
                              id(esp32_chip_revision), 
                              id(esp32_framework), 
                              id(esp32_esp_idf_version), 
                              id(esp32_efuse_mac), 
                              id(esp32_reset_reason), 
                              id(esp32_wakeup_reason));
    reset_reason:
      name: "Uptime: Reset Reason"
      icon: mdi:alert-circle-outline
  - platform: template
    name: "SW: ESPHome Version"
    internal: true
    id: esp32_esphome_version
    entity_category: diagnostic
    icon: mdi:information-outline
  - platform: template
    name: "HW: Chip Model"
    id: esp32_chip_model
    entity_category: diagnostic
    icon: mdi:chip
  - platform: template
    name: "HW: Chip Features"
    id: esp32_chip_features
    entity_category: diagnostic
    icon: mdi:feature-search-outline
  - platform: template
    name: "HW: Chip Cores"
    id: esp32_chip_cores
    entity_category: diagnostic
    icon: mdi:cpu-32-bit
  - platform: template
    name: "HW: Chip Revision"
    id: esp32_chip_revision
    entity_category: diagnostic
    icon: mdi:refresh-auto
  - platform: template
    name: "SW: Framework"
    id: esp32_framework
    entity_category: diagnostic
    icon: mdi:code-braces
  - platform: template
    name: "SW: ESP-IDF Version"
    id: esp32_esp_idf_version
    entity_category: diagnostic
    icon: mdi:code-braces
  - platform: template
    internal: true
    name: "ESP32 EFuse MAC"
    id: esp32_efuse_mac
    entity_category: diagnostic
    icon: mdi:ethernet
  - platform: template
    name: "Uptime: Reset Reason"
    id: esp32_reset_reason
    entity_category: diagnostic
    icon: mdi:restart
  - platform: template
    name: "Uptime: Wakeup Reason"
    id: esp32_wakeup_reason
    entity_category: diagnostic
    icon: mdi:power-sleep

# Add OTA component to enable updates
ota:

# Automation to check for GitHub updates periodically
interval:
  - interval: 1h
    then:
      - service: check_for_updates

# Automation to notify when an update is available
automation:
  # Notify when ESPHome update is available
  - alias: "Notify when ESPHome update is available"
    trigger:
      - platform: homeassistant
        event: esphome.update_available
    action:
      - homeassistant.service:
          service: persistent_notification.create
          data:
            title: "ESPHome Update Available"
            message: "A new update is available for your ESPHome device. Please update to the latest version."
  
  # Notify when GitHub repository has changes
  - alias: "Notify when GitHub repository has changes"
    trigger:
      - platform: state
        entity_id: binary_sensor.github_update_available
        to: "on"
    action:
      - homeassistant.service:
          service: persistent_notification.create
          data:
            title: "GitHub Repository Updated"
            message: "Changes detected in the ESPHome GitHub repository. Please update your configurations."
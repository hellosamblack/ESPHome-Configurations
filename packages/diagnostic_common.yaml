
# Define a constant for unknown values
globals:
  - id: unknown_value
    type: std::string
    initial_value: "Unknown"

# Define buttons for various actions
button:
  - platform: restart
    name: Restart
    icon: mdi:restart-alert  # More specific restart icon
    entity_category: "config"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset"
    id: factory_reset_all
    icon: mdi:restore-alert  # More specific reset icon
    entity_category: "config"

# Define a switch for factory reset, used internally
switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true

# Enable debug logging with an update interval of 30 seconds
debug:
  update_interval: 30s


# Define sensors for various diagnostic metrics
sensor:
  # Internal temperature of the ESP
  - platform: internal_temperature
    name: "HW: Temperature"
    id: sys_esp_temperature
    icon: mdi:thermometer
    entity_category: "diagnostic"

  # WiFi signal strength in dB
  - platform: wifi_signal
    name: "WiFi: Signal dB"
    id: wifi_signal_db
    unit_of_measurement: "dB"
    update_interval: 60s
    entity_category: "diagnostic"
    internal: false
    icon: mdi:wifi-strength-3

  # WiFi signal strength as a percentage
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi: Signal Strength"
    id: wifi_signal_strength
    filters:
      # Convert WiFi signal strength from dB to percentage
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: signal_strength
    icon: mdi:wifi-strength-4

  # Uptime of the device
  - platform: uptime
    name: "Uptime"
    entity_category: "diagnostic"
    icon: mdi:clock-outline

  # Debug information about heap memory and loop time
  - platform: debug
    free:
      name: "HW: Heap Free"
      icon: mdi:memory
      entity_category: "diagnostic"
    block:
      name: "HW: Heap Max Block"
      icon: mdi:memory
      entity_category: "diagnostic"
    loop_time:
      name: "HW: Loop Time"
      icon: mdi:timer-outline
      entity_category: "diagnostic"

  # Version information
  - platform: git_ref
    internal: false
    id: git_ref_id
    name: "Version: Git Ref"
    long: true
    all: true
    abbrev: 16
    dirty: "-dirty"
    icon: mdi:git


text_sensor:
  - platform: version
    internal: false
    id: esphome_version_id
    name: "Version: ESPHome"
    hide_timestamp: true
    icon: mdi:tag-text

  # ESPHome Build Time
  - platform: template
    name: "Version: Build Time"
    id: esphome_build_time
    icon: "mdi:calendar-clock"
    entity_category: "diagnostic"
    update_interval: 600s
    lambda: |-
      return App.get_compilation_time().c_str();

  # WiFi information including IP address, SSID, BSSID, MAC address, scan results, and DNS address
  - platform: wifi_info
    ip_address:
      name: "Network: IP Address"
      icon: mdi:ip-network
      address_0:
        name: "Network: IP Address"
        icon: mdi:ip-network
    ssid:
      name: "WiFi: SSID"
      icon: mdi:wifi
    bssid:
      name: "WiFi: BSSID"
      icon: mdi:router-wireless
    # This is already visible in the device info
    # mac_address:
    #  name: Network MAC
    scan_results:
      name: "WiFi: SSIDs"
      icon: mdi:wifi-search
    dns_address:
      name: "Network: DNS Address"
      icon: mdi:dns

  # Debug information about the device and reset reason
  - platform: template
    name: "SW: ESPHome Version"
    id: esp32_esphome_version
    entity_category: diagnostic
    icon: mdi:information-outline

  - platform: template
    name: "HW: Chip Model"
    id: esp32_chip_model
    entity_category: diagnostic
    icon: mdi:chip
    lambda: |-
      auto parts = std::vector<std::string>();
      std::istringstream stream(x.c_str());
      std::string part;
      while (std::getline(stream, part, '|')) {
        parts.push_back(part);
      }
      if (parts.size() >= 7) {
        id(esp32_esphome_version).publish_state(parts[0].c_str());

        auto chip_info = parts[1];
        auto chip_model_start = chip_info.find("Chip: ");
        auto chip_model_end = chip_info.find(" Features:");
        if (chip_model_start != std::string::npos && chip_model_end != std::string::npos) {
          id(esp32_chip_model).publish_state(chip_info.substr(chip_model_start + 6, chip_model_end - chip_model_start - 6).c_str());
        }

        auto features_start = chip_info.find("Features:");
        auto features_end = chip_info.find(" Cores:");
        if (features_start != std::string::npos && features_end != std::string::npos) {
          id(esp32_chip_features).publish_state(chip_info.substr(features_start + 9, features_end - features_start - 9).c_str());
        }

        auto cores_start = chip_info.find("Cores:");
        auto cores_end = chip_info.find(" Revision:");
        if (cores_start != std::string::npos) {
          id(esp32_chip_cores).publish_state(chip_info.substr(cores_start + 6, cores_end - cores_start - 6).c_str());
        }

        auto revision_start = chip_info.find("Revision:");
        if (revision_start != std::string::npos) {
          id(esp32_chip_revision).publish_state(chip_info.substr(revision_start + 9).c_str());
        } else {
          id(esp32_chip_revision).publish_state("Unknown");
        }

        auto extract_framework = [](const std::string& part, const std::string& key) -> std::string {
          auto pos = part.find(key);
          if (pos != std::string::npos) {
            return part.substr(pos + key.length());
          }
          return "";
        };

        for (const auto& part : parts) {
          if (part.find("Framework:") != std::string::npos) {
            id(esp32_framework).publish_state(extract_framework(part, "Framework:").c_str());
          }
          if (part.find("ESP-IDF:") != std::string::npos) {
            id(esp32_esp_idf_version).publish_state(extract_framework(part, "ESP-IDF:").c_str());
          }
        }

        id(esp32_efuse_mac).publish_state(parts[parts.size() - 3].substr(11).c_str());
        id(esp32_reset_reason).publish_state(parts[parts.size() - 2].substr(7).c_str());
        id(esp32_wakeup_reason).publish_state(parts[parts.size() - 1].substr(8).c_str());
      }

  - platform: template
    name: "HW: Chip Features"
    id: esp32_chip_features
    entity_category: diagnostic
    icon: mdi:feature-search-outline

  - platform: template
    name: "HW: Chip Cores"
    id: esp32_chip_cores
    entity_category: diagnostic
    icon: mdi:cpu-32-bit

  - platform: template
    name: "HW: Chip Revision"
    id: esp32_chip_revision
    entity_category: diagnostic
    icon: mdi:refresh-auto

  - platform: template
    name: "SW: Framework"
    id: esp32_framework
    entity_category: diagnostic

  - platform: template
    name: "SW: ESP-IDF Version"
    id: esp32_esp_idf_version
    entity_category: diagnostic
    icon: mdi:code-braces

  - platform: template
    internal: true
    name: "ESP32 EFuse MAC"
    id: esp32_efuse_mac
    entity_category: diagnostic
    icon: mdi:ethernet

  - platform: template
    name: "Uptime: Reset Reason"
    id: esp32_reset_reason
    entity_category: diagnostic
    icon: mdi:restart

  - platform: template
    name: "Uptime: Wakeup Reason"
    id: esp32_wakeup_reason
    entity_category: diagnostic
    icon: mdi:power-sleep

# Add OTA component to enable updates
ota:
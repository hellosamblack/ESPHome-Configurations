external_components:
  - source:
      type: git
      url: https://github.com/hellosamblack/esphome-configurations
      ref: main
    components: [ sam_seeed_mr60bha2 ]
    refresh: 0min

sam_seeed_mr60bha2:

logger:
  logs:
      bh1750.sensor: INFO

binary_sensor:
  - platform: sam_seeed_mr60bha2
    has_target:
      name: "Person Detected (Raw)"
      id: person_detected_raw
      device_class: occupancy
      #entity_category: "diagnostic"
      on_state:
        then:
          - sensor.template.publish:
              id: last_update_timestamp
              state: !lambda "return id(global_time).now().timestamp;"

  - platform: template
    id: stuck_distance_detected
    name: "Stuck Distance Detected"
    lambda: |-
      static float last_distance = 0;
      static uint32_t last_change = 0;
      if (id(distance).state != last_distance) {
        last_distance = id(distance).state;
        last_change = id(global_time).now().timestamp;
      }
      return (id(global_time).now().timestamp - last_change) > 600;
    device_class: problem

  - platform: template
    id: person_detected
    name: "Person Detected"
    device_class: occupancy
    lambda: |-
      if (id(stuck_distance_detected).state) {
        return false;
      }
      return id(person_detected_raw).state;
    filters:
      - delayed_off: 60s
    on_state:
        then:
          - sensor.template.publish:
              id: last_update_timestamp
              state: !lambda "return id(global_time).now().timestamp;"

light:
  - platform: esp32_rmt_led_strip
    id: led_ring
    name: "Front LED"
    pin: GPIO1
    num_leds: 1
    rgb_order: GRB
    chipset: ws2812
    effects:
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s
      - lambda:
          name: "Distance Visualization"
          update_interval: 1s
          lambda: |-
            if (id(person_detected_raw).state) {
              float distance_var = id(distance).state;
              float brightness = (distance_var / 10.0) * 89.0 + 11.0; // Map distance 0-10 to brightness 11-100
              int red = (int)(255 * (1 - (distance_var / 10.0))); // Red decreases as distance increases
              int green = (int)(255 * (distance_var / 10.0)); // Green increases as distance increases
              int blue = (int)(255 * (distance_var / 10.0)); // Blue increases as distance increases
              auto call = id(led_ring).turn_on();
              call.set_brightness(brightness / 100.0);
              call.set_rgb(red / 255.0, green / 255.0, blue / 255.0);
              call.perform(); 
            } else {
              id(led_ring).turn_off();
            }


sensor:
  - platform: bh1750
    name: "Ambient Light"
    address: 0x23
    update_interval: 1s
    accuracy_decimals: 0
    device_class: illuminance
    id: illuminance
    state_class: measurement
    filters:
        - or: 
          - delta: 10%
          - heartbeat: 15s
    on_value:
        then:
          - sensor.template.publish:
              id: last_update_timestamp
              state: !lambda "return id(global_time).now().timestamp;"


  - platform: sam_seeed_mr60bha2
    breath_rate:
      name: "Respiratory Rate"
      id: respiratory_rate
      state_class: measurement
      filters:
        - exponential_moving_average:
            alpha: 0.1
            send_every: 5
        - or:
          - delta: 2
          - heartbeat: 15s
      on_value:
          then:
            - sensor.template.publish:
                id: last_update_timestamp
                state: !lambda "return id(global_time).now().timestamp;"
    heart_rate:
      name: "Heart Rate"
      id: heart_rate
      state_class: measurement
      accuracy_decimals: 0
      filters:
        - exponential_moving_average:
            alpha: 0.1
            send_every: 5
        - or: 
          - delta: 5
          - heartbeat: 15s
      on_value:
        then:
          - sensor.template.publish:
              id: last_update_timestamp
              state: !lambda "return id(global_time).now().timestamp;"
    distance:
      name: "Distance"
      id: distance
      unit_of_measurement: ft
      accuracy_decimals: 1
      filters:
        - multiply: .0328084 # Convert centimeters to feet
        - or: 
          - delta: 10%
          - heartbeat: 15s
      on_value:
          then:
            - sensor.template.publish:
                id: last_update_timestamp
                state: !lambda "return id(global_time).now().timestamp;"
    num_targets:
      name: "Number of Targets"
      id: number_of_targets
      unit_of_measurement: "People"
      state_class: measurement
      accuracy_decimals: 0
      filters:
        - or: 
          - delta: 1
          - heartbeat: 15s
      on_value:
          then:
            - sensor.template.publish:
                id: last_update_timestamp
                state: !lambda "return id(global_time).now().timestamp;"